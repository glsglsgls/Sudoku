import numpy as np


import numpy as np


def generate_sudoku(mask_rate=0.5):
    while True:
        n = 9
        m = np.zeros((n, n), np.int)
        rg = np.arange(1, n + 1)
        m[0, :] = np.random.choice(rg, n, replace=False)
        try:
            for r in range(1, n):
                for c in range(n):
                    col_rest = np.setdiff1d(rg, m[:r, c])
                    row_rest = np.setdiff1d(rg, m[r, :c])
                    avb1 = np.intersect1d(col_rest, row_rest)
                    sub_r, sub_c = r//3, c//3
                    avb2 = np.setdiff1d(np.arange(0, n+1), m[sub_r*3:(sub_r+1)*3, sub_c*3:(sub_c+1)*3].ravel())
                    avb = np.intersect1d(avb1, avb2)
                    m[r, c] = np.random.choice(avb, size=1)
            break
        except ValueError:
            pass
    # print("Answer:\n", m)
    mm = m.copy()
    mm[np.random.choice([True, False], size=m.shape, p=[mask_rate, 1 - mask_rate])] = 0
    # print("Board:\n", mm)
    return mm

def check_solution(m):
    if isinstance(m, list):
        m = np.array(m)
    elif isinstance(m, str):
        m = np.loadtxt(m, dtype=np.int, delimiter=",")
    set_rg = set(np.arange(1, m.shape[0] + 1))
    no_good = False
    for i in range(m.shape[0]):
        for j in range(m.shape[1]):
            r1 = set(m[3 * (i // 3):3 * (i // 3 + 1), 3 * (j // 3):3 * (j // 3 + 1)].ravel()) == set_rg
            r2 = set(m[i, :]) == set_rg
            r3 = set(m[:, j]) == set_rg
            if not (r1 and r2 and r3):
                no_good = True
                break
        if no_good:
            break
    if no_good:
        print("\nChecked: not good")
    else:
        print("\nChecked: OK")




class SOlver:
    def __init__(self, board, iters):
        self.board = board
        self.empty_board = np.copy(self.board)
        self.count = 0
        self.MAX_ITERATIONS = iters

    def empty(self):
        for i in range(9):
            for j in range(9):
                if self.board[i][j] == 0:
                    return i, j
        return None
            
    def isValid(self, num, row, col):
        #Checking row and col
        for i in range(9):
            if self.board[row][i] == num and i != col:
                return False
            if self.board[i][col] == num and i != row:
                return False
        #Checking the boxes
        y = row // 3
        x = col // 3
        for i in range(y*3, y*3 + 3):
            for j in range(x*3, x*3 + 3):
                if self.board[i][j] == num and (i != row or j != col):
                    return False
        return True

    def solve(self):
        self.__solve()
        # print(f"iterations: {self.count}")
        return self.board, self.count

    def __solve(self):
        pos = self.empty()
        if pos == None:
            # print("Solved:\n", self.board)
            return True # exit when board is filled up
        
        self.count += 1
        row, col = pos
            
        for i in range(1, 10):
            self.board[row][col] = i
            if self.isValid(i, row, col) and self.__solve():
                return True  
            else:
                self.board[row][col] = 0

        if self.count > self.MAX_ITERATIONS:
            print(self.empty_board)
            print("Impossible to solve!")
            import sys
            sys.exit()
        return False
			

# table=(
#     3,1,0,4,0,0,0,8,0,
#     9,6,0,0,0,0,0,0,4,
#     0,8,4,0,0,0,3,0,0,
#     0,0,3,0,7,1,8,4,0,
#     4,7,1,0,0,0,0,3,5,
#     8,0,6,0,3,4,1,2,7,
#     6,5,0,0,0,0,4,0,0,
#     1,4,0,0,9,5,7,6,0,
#     7,3,0,0,4,0,0,0,0
# )

# table = (
#     0,9,0,0,0,0,3,0,8,
#     0,0,3,5,9,0,6,0,0,
#     0,0,0,0,0,0,7,0,0,
#     0,0,2,8,0,0,0,0,5,
#     0,1,0,3,0,0,0,0,0,
#     4,0,0,0,0,6,0,8,1,
#     5,0,0,0,2,7,0,0,0,
#     0,0,9,0,0,0,0,0,0,
#     0,0,0,0,1,0,0,6,0
# ) # sudoku.com - expert level

# table = (
#     9,0,0,0,5,0,0,0,0,
#     0,5,3,7,0,0,0,8,0,
#     4,0,0,0,0,0,0,0,3,
#     0,9,0,0,0,0,0,0,0,
#     0,8,5,0,6,0,0,0,1,
#     0,0,0,4,0,0,6,0,0,
#     0,6,1,0,4,0,0,0,8,
#     0,0,0,0,0,2,0,7,0,
#     3,0,0,0,0,0,0,0,0,
# )


iters = []
for i in range(3):
    board = generate_sudoku(mask_rate=0.9)
    empty_board = np.copy(board)
    # board = np.array(table).reshape((9, 9))
    slv = SOlver(board, 6000)
    resp = slv.solve()

    iters.append(
        {
            'board': empty_board,
            'answer': resp[0],
            'iters': resp[1]
        }
    )

sorted_list = sorted(iters, key=lambda k: k['iters'])
print("Max iterations: " + str(sorted_list[-1]['iters']))
# if sorted_list[-1]['iters'] > 3000:

print(f"The hardest board: {sorted_list[-1]['iters']}")
print(sorted_list[-1]['answer'])

print(f"The easiest board: {sorted_list[0]['iters']}")
print(sorted_list[0]['answer'])






